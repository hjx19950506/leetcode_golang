package isValidSudoku

import (
	"fmt"
	"testing"
)

func TestIsValidSudoku(t *testing.T) {
	cases := []struct{
		board  	[][]byte
		want 	bool
	} {
		{
			[][]byte{
				[]byte{'5','3','.','.','7','.','.','.','.'},
				[]byte{'6','.','.','1','9','5','.','.','.'},
				[]byte{'.','9','8','.','.','.','.','6','.'},
				[]byte{'8','.','.','.','6','.','.','.','3'},
				[]byte{'4','.','.','8','.','3','.','.','1'},
				[]byte{'7','.','.','.','2','.','.','.','6'},
				[]byte{'.','6','.','.','.','.','2','8','.'},
				[]byte{'.','.','.','4','1','9','.','.','5'},
				[]byte{'.','.','.','.','8','.','.','7','9'},
			},
			true,
		},
		{
			[][]byte{
				[]byte{'8','3','.','.','7','.','.','.','.'},
				[]byte{'6','.','.','1','9','5','.','.','.'},
				[]byte{'.','9','8','.','.','.','.','6','.'},
				[]byte{'8','.','.','.','6','.','.','.','3'},
				[]byte{'4','.','.','8','.','3','.','.','1'},
				[]byte{'7','.','.','.','2','.','.','.','6'},
				[]byte{'.','6','.','.','.','.','2','8','.'},
				[]byte{'.','.','.','4','1','9','.','.','5'},
				[]byte{'.','.','.','.','8','.','.','7','9'},
			},
			false,
		},
	}

	for k, v := range cases {
		t.Run(fmt.Sprint("test", k), func(t *testing.T) {
			got := isValidSudoku(v.board)
			if got != v.want {
				t.Errorf("got %v want %v", got, v.want)
			}
		})
	}
}
